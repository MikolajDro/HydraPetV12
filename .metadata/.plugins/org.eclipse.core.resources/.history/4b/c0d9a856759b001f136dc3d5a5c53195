#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"
#include "esp_event.h"
#include "esp_netif.h"
#include "nvs_flash.h"

#include "esp_log.h"
#include "esp_wifi.h"
#include "mqtt_client.h"

#include "driver/gpio.h"

/* Konfiguracja Wi-Fi */
#define WIFI_SSID      "hydrapet"//"iPhone (w)" //
#define WIFI_PASS      "hydrapet"//"qwertyuiop" //

/* Konfiguracja MQTT */
#define MQTT_BROKER_URI "mqtt://10.42.0.1"

/* Konfiguracja GPIO dla diody LED */
#define LED_GPIO_PIN GPIO_NUM_2 // Upewnij się, że używasz poprawnego pinu dla ESP32C6

static const char *TAG = "MQTT_EXAMPLE";

static esp_mqtt_client_handle_t mqtt_client = NULL;

/* Funkcja obsługi zdarzeń Wi-Fi */
static void wifi_event_handler(void* arg, esp_event_base_t event_base,
                               int32_t event_id, void* event_data)
{
    if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_START) {
        esp_wifi_connect();
        ESP_LOGI(TAG, "Laczenie z siecia Wi-Fi...");
    } else if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_DISCONNECTED) {
        esp_wifi_connect();
        ESP_LOGI(TAG, "Ponowne laczenie z Wi-Fi...");
    } else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP) {
        ESP_LOGI(TAG, "Uzyskano adres IP");
    }
}

/* Inicjalizacja Wi-Fi */
void wifi_init(void)
{
    esp_netif_init();
    esp_event_loop_create_default();
    esp_netif_create_default_wifi_sta();

    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    esp_wifi_init(&cfg);

    esp_event_handler_instance_t instance_any_id;
    esp_event_handler_instance_t instance_got_ip;
    esp_event_handler_instance_register(WIFI_EVENT,
                                        ESP_EVENT_ANY_ID,
                                        &wifi_event_handler,
                                        NULL,
                                        &instance_any_id);
    esp_event_handler_instance_register(IP_EVENT,
                                        IP_EVENT_STA_GOT_IP,
                                        &wifi_event_handler,
                                        NULL,
                                        &instance_got_ip);

    wifi_config_t wifi_config = {
        .sta = {
            .ssid = WIFI_SSID,
            .password = WIFI_PASS,
            /* Ustawienia dodatkowe */
            .threshold.authmode = WIFI_AUTH_WPA_PSK,
        },
    };

    esp_wifi_set_mode(WIFI_MODE_STA);
    esp_wifi_set_config(WIFI_IF_STA, &wifi_config);
    esp_wifi_start();
}

/* Funkcja obsługi zdarzeń MQTT */
static esp_err_t mqtt_event_handler_cb(esp_mqtt_event_handle_t event)
{
    mqtt_client = event->client;
    switch (event->event_id) {
        case MQTT_EVENT_CONNECTED:
            ESP_LOGI(TAG, "Polaczono z brokerem MQTT");
            break;
        case MQTT_EVENT_DISCONNECTED:
            ESP_LOGI(TAG, "Rozlaczono z brokerem MQTT");
            break;
        default:
            break;
    }
    return ESP_OK;
}

/* Inicjalizacja MQTT */
static void mqtt_app_start(void)
{
    esp_mqtt_client_config_t mqtt_cfg = {
        .broker.address.uri = MQTT_BROKER_URI,
    };

    mqtt_client = esp_mqtt_client_init(&mqtt_cfg);
    esp_mqtt_client_register_event(mqtt_client, ESP_EVENT_ANY_ID, mqtt_event_handler_cb, NULL);
    esp_mqtt_client_start(mqtt_client);
}

/* Zadanie publikujące wiadomość co 1 sekundę */
void mqtt_publish_task(void *pvParameters)
{
    while (1) {
        if (mqtt_client != NULL) {
            esp_mqtt_client_publish(mqtt_client, "test/topic", "Hello PBL5!", 0, 1, 0);
            ESP_LOGI(TAG, "Wyslano wiadomosc: Hello PBL5!");
        }
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}

/* Zadanie zmieniające stan diody LED co 1 sekundę */
void led_toggle_task(void *pvParameters)
{
    bool led_state = false;
    gpio_reset_pin(LED_GPIO_PIN);
    gpio_set_direction(LED_GPIO_PIN, GPIO_MODE_OUTPUT);

    while (1) {
        led_state = !led_state;
        gpio_set_level(LED_GPIO_PIN, led_state);
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}

void app_main(void)
{
    // Inicjalizacja NVS
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES ||
        ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        nvs_flash_erase();
        nvs_flash_init();
    }

    wifi_init();
    mqtt_app_start();

    xTaskCreate(&mqtt_publish_task, "mqtt_publish_task", 4096, NULL, 5, NULL);
    xTaskCreate(&led_toggle_task, "led_toggle_task", 2048, NULL, 5, NULL);
}
