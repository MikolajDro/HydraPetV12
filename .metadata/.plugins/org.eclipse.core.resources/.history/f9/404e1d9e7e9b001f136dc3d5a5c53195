#include <stdio.h>
#include <stdint.h>
#include <string.h>

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

#include "nvs_flash.h"
#include "esp_system.h"
#include "esp_event.h"
#include "esp_log.h"

#include "esp_wifi.h"
#include "esp_netif.h"
#include "mqtt_client.h"

#include "driver/gpio.h"

/* Konfiguracja Wi-Fi */
#define WIFI_SSID      "hydrapet"
#define WIFI_PASS      "hydrapet"

/* Konfiguracja MQTT */
#define MQTT_BROKER_URI "mqtt://192.168.112.116" // Zmień na adres swojego brokera
#define MQTT_BROKER_PORT 1883 // Ustawienie portu MQTT

/* Konfiguracja GPIO dla diody LED */
#define LED_GPIO_PIN GPIO_NUM_2 // Upewnij się, że używasz poprawnego pinu dla ESP32C6

static const char *TAG = "MQTT_EXAMPLE";

static esp_mqtt_client_handle_t mqtt_client = NULL;

/* Funkcja obsługi zdarzeń Wi-Fi */
static void wifi_event_handler(void* arg, esp_event_base_t event_base,
                               int32_t event_id, void* event_data)
{
    if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_START) {
        esp_wifi_connect();
        ESP_LOGI(TAG, "Łączenie z siecią Wi-Fi...");
    } else if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_DISCONNECTED) {
        ESP_LOGI(TAG, "Rozłączono z Wi-Fi, ponawianie połączenia...");
        esp_wifi_connect();
    } else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP) {
        ESP_LOGI(TAG, "Uzyskano adres IP");
    }
}

/* Inicjalizacja Wi-Fi */
void wifi_init(void)
{
    ESP_ERROR_CHECK(esp_netif_init());
    ESP_ERROR_CHECK(esp_event_loop_create_default());
    esp_netif_create_default_wifi_sta();

    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));

    /* Rejestracja handlera zdarzeń Wi-Fi */
    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT,
                                                        ESP_EVENT_ANY_ID,
                                                        &wifi_event_handler,
                                                        NULL,
                                                        NULL));
    ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT,
                                                        IP_EVENT_STA_GOT_IP,
                                                        &wifi_event_handler,
                                                        NULL,
                                                        NULL));

    wifi_config_t wifi_config = {
        .sta = {
            .ssid = WIFI_SSID,
            .password = WIFI_PASS,
            /* Ustawienia dodatkowe */
            .threshold.authmode = WIFI_AUTH_WPA_PSK,
            .sae_pwe_h2e = WPA3_SAE_PWE_BOTH,
        },
    };

    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_config));
    ESP_ERROR_CHECK(esp_wifi_start());
}

/* Funkcja obsługi zdarzeń MQTT */
static void mqtt_event_handler_cb(void *handler_args, esp_event_base_t event_base,
                                  int32_t event_id, void *event_data)
{
    esp_mqtt_event_handle_t event = (esp_mqtt_event_handle_t) event_data;

    switch (event->event_id) {
        case MQTT_EVENT_CONNECTED:
            ESP_LOGI(TAG, "Połączono z brokerem MQTT");
            break;
        case MQTT_EVENT_DISCONNECTED:
            ESP_LOGI(TAG, "Rozłączono z brokerem MQTT");
            break;
        case MQTT_EVENT_PUBLISHED:
            ESP_LOGI(TAG, "Wiadomość opublikowana, msg_id=%d", event->msg_id);
            break;
        case MQTT_EVENT_ERROR:
            ESP_LOGE(TAG, "MQTT_EVENT_ERROR");
            break;
        default:
            ESP_LOGI(TAG, "Inne zdarzenie MQTT id:%d", event->event_id);
            break;
    }
}

/* Inicjalizacja MQTT */
static void mqtt_app_start(void)
{
    esp_mqtt_client_config_t mqtt_cfg = {
        .broker.address.uri = MQTT_BROKER_URI,
        .broker.address.port = MQTT_BROKER_PORT, // Ustawienie portu MQTT
    };

    mqtt_client = esp_mqtt_client_init(&mqtt_cfg);
    /* Rejestracja handlera zdarzeń MQTT */
    esp_mqtt_client_register_event(mqtt_client, ESP_EVENT_ANY_ID, mqtt_event_handler_cb, NULL);
    esp_mqtt_client_start(mqtt_client);
}

/* Zadanie publikujące wiadomość co 1 sekundę */
void mqtt_publish_task(void *pvParameters)
{
    while (1) {
        if (mqtt_client != NULL) {
            int msg_id = esp_mqtt_client_publish(mqtt_client, "test", "Hello PBL5!", 0, 1, 0);
            ESP_LOGI(TAG, "Wysłano wiadomość: Hello PBL5!, msg_id=%d", msg_id);
        }
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}

/* Zadanie zmieniające stan diody LED co 1 sekundę */
void led_toggle_task(void *pvParameters)
{
    bool led_state = false;
    gpio_reset_pin(LED_GPIO_PIN);
    gpio_set_direction(LED_GPIO_PIN, GPIO_MODE_OUTPUT);

    while (1) {
        led_state = !led_state;
        gpio_set_level(LED_GPIO_PIN, led_state);
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}

void app_main(void)
{
    // Inicjalizacja NVS
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES ||
        ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    wifi_init();
    mqtt_app_start();

    xTaskCreate(&mqtt_publish_task, "mqtt_publish_task", 4096, NULL, 5, NULL);
    xTaskCreate(&led_toggle_task, "led_toggle_task", 2048, NULL, 5, NULL);
}
