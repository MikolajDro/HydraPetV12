#include <stdio.h>
#include <string.h>
#include <time.h>
#include <stdint.h>
#include <stdbool.h>

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/semphr.h"

#include "esp_log.h"
#include "esp_system.h"
#include "driver/gpio.h"
#include "nvs_flash.h"
#include "esp_event.h"
#include "esp_wifi.h"

#include "mqtt.h"         
#include "hx711.h"        
#include "led.h"          
#include "buttons.h"      
#include "driver/uart.h"  
#include "wifi.h"
#include "motor.h"
#include "alarms.h"
#include "water_level_sensor.h"

static const char *TAG = "MAIN";

// Definicje pinów (jeśli nie masz w sdkconfig)
#define PUBLISH_ALL_DURATION_TIME	60 * 1000 // 1 minute between refresh


static void publish_task(void *pvParameters)
{
    while (true)
    {
        // Sprawdź, czy jesteśmy połączeni do Wi-Fi
        while (!is_wifi_connected())
        {
            ESP_LOGW(TAG, "Wi-Fi connection not established yet");
            vTaskDelay(pdMS_TO_TICKS(2000)); 
        }

        // Jesteśmy połączeni, odczytujemy dane
        int32_t weight = get_water_weight();  // z HX711
        time_t now = 0;
        time(&now);
        struct tm timeinfo = {0};
        localtime_r(&now, &timeinfo);


        // Wysyłamy na topic "hydrapet/get/all"
        mqtt_publish_all(weight, 
        				timeinfo, 
        				user_button_state(), 
        				led_get_state(), 
        				get_motor_state());


        // Publikujemy stan wody na temat hydrapet0001/hydrapetinfo/water
        mqtt_publish_water_state(weight);

        // Publikujemy aktualny czas na temat hydrapet0001/hydrapetinfo/time
        mqtt_publish_current_time(timeinfo);
        
        
        mqtt_publish_water_tank_level();

        // Po publikacji mignij diodą
        led_blink_once();

        // Czekaj 10 sekund
        vTaskDelay(pdMS_TO_TICKS(PUBLISH_ALL_DURATION_TIME));
    }
}


void app_main(void)
{
    // Inicjalizacja NVS
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES ||
        ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    // Inicjalizacja diody
    led_init();
    
	esp_log_level_set("wifi", ESP_LOG_ERROR);

    // Inicjalizacja Wi-Fi
	wifi_init();	

    // Inicjalizacja MQTT
    mqtt_init();
    
    motor_init();
    
    // Inicjalizacja alarmów
    alarms_init();

    // Inicjalizacja przycisków
    buttons_init();

    // Inicjalizacja HX711
    hx711_init();

    // Utworzenie zadań
    // 1) Zadanie publikujące co 10 sekund
    xTaskCreate(publish_task, "publish_task", 4096, NULL, 5, NULL);

    // Ustawiamy callback do obsługi odebranych wiadomości MQTT
    mqtt_set_message_callback(mqtt_message_handler);

    // 2) Zadanie obsługujące przycisk pair
    xTaskCreate(water_level_sensor_task, "water_level_sensor_task", 2048, NULL, 5, NULL);
    
    xTaskCreate(buttons_task, "user_button_task", 2048, NULL, 5, NULL);
    
    // Główna pętla nie robi nic – wszystko jest w zadaniach
    while (1)
    {
        vTaskDelay(pdMS_TO_TICKS(10000000000));
    }
}
