#include <stdio.h>
#include <string.h>
#include <time.h>
#include <stdint.h>
#include <stdbool.h>

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/semphr.h"

#include "esp_log.h"
#include "esp_system.h"
#include "driver/gpio.h"
#include "nvs_flash.h"
#include "esp_event.h"
#include "esp_wifi.h"

#include "mqtt.h"         // Twój moduł MQTT
#include "hx711.h"        // Odczyt wagi
#include "led.h"          // Zarządzanie diodą (led_init, led_set_state itp.)
#include "buttons.h"      // Odczyt stanu przycisków
#include "driver/uart.h"  // Jeśli używasz UART
#include "wifi.h"

static const char *TAG = "MAIN";

// Definicje pinów (jeśli nie masz w sdkconfig)
#define BUTTON_MQTT_PIN  GPIO_NUM_4  // Przycisk do MQTT (lub inny)
#define BUTTON_PAIR_PIN  GPIO_NUM_10  // Przycisk pair (zamiast LED)
#define MOTOR_PIN        GPIO_NUM_15 // Pin 15 – silnik

// Zmienna globalna do śledzenia stanu diody (ON/OFF)
static bool led_state = false;

// Zmienna do śledzenia stanu połączenia z Wi-Fi
static bool wifi_connected = false;

// Funkcja do sprawdzenia czy jesteśmy połączeni z Wi-Fi
bool is_wifi_connected(void)
{
    // Tu wstaw logikę sprawdzania statusu Wi-Fi (np. eventy, flaga)
    // Załóżmy, że mamy zmienną globalną wifi_connected
    return wifi_connected;
}

// Funkcja blink diodą (mignięcie raz)
static void led_blink_once(void)
{
    // Włącz
    led_set_state(true);
    vTaskDelay(pdMS_TO_TICKS(200));
    // Wyłącz
    led_set_state(false);
    vTaskDelay(pdMS_TO_TICKS(200));
}

// Funkcja migania diodą co 500 ms przez np. 5 sekund
static void led_blink_pair(void)
{
    // Miga co 500 ms przez np. 5 sekund (10 cykli)
    for (int i = 0; i < 10; i++)
    {
        led_set_state(true);
        vTaskDelay(pdMS_TO_TICKS(500));
        led_set_state(false);
        vTaskDelay(pdMS_TO_TICKS(500));
    }
}


/**
 * @brief Callback do obsługi odebranych wiadomości MQTT
 *
 * @param topic Otrzymany temat
 * @param message Otrzymana wiadomość
 */
void mqtt_message_handler(const char *topic, const char *message)
{
    ESP_LOGI(TAG, "Odebrano wiadomość na temat: %s -> %s", topic, message);

    // Obsługa różnych tematów
    if (strcmp(topic, "hydrapet0001/update/set/time") == 0) {
        // Przykład: ustawianie czasu
        ESP_LOGI(TAG, "Ustawianie czasu na podstawie wiadomości: %s", message);
        // Implementacja ustawiania czasu wymaga synchronizacji czasu, np. przez SNTP
        // Poniżej przykładowa implementacja ustawiania czasu lokalnego
        struct tm new_time;
        memset(&new_time, 0, sizeof(new_time));
        // Zakładamy, że wiadomość ma format "YYYY-MM-DDTHH:MM:SS"
        sscanf(message, "%d-%d-%dT%d:%d:%d",
               &new_time.tm_year, &new_time.tm_mon, &new_time.tm_mday,
               &new_time.tm_hour, &new_time.tm_min, &new_time.tm_sec);
        new_time.tm_year -= 1900; // tm_year: years since 1900
        new_time.tm_mon -= 1;     // tm_mon: months since January [0-11]
        // Ustawienie czasu systemowego (wymaga konfiguracji czasu przez SNTP lub inne źródła)
        // Możesz użyć funkcji time() i settimeofday() jeśli masz odpowiednie uprawnienia
        // Poniżej przykład z użyciem SNTP do synchronizacji czasu
        // Implementacja zależy od Twoich potrzeb
    }
    else if (strcmp(topic, "hydrapet0001/update/get/time") == 0) {
        // Przykład: wysyłanie aktualnego czasu
        ESP_LOGI(TAG, "Wysyłanie aktualnego czasu na żądanie");
        // Pobierz aktualny czas i wyślij go
        time_t now;
        struct tm timeinfo;
        time(&now);
        localtime_r(&now, &timeinfo);
        mqtt_publish_current_time(timeinfo);
    }
    else if (strcmp(topic, "hydrapet0001/update/set/water") == 0) {
        // Przykład: ustawianie stanu wody
        ESP_LOGI(TAG, "Ustawianie stanu wody na podstawie wiadomości: %s", message);
        // Możesz tutaj zaktualizować stan wody, np. poprzez sterowanie zaworem
        // Konwersja wiadomości na int
        int water_state = (int )atoi(message);
        // Implementacja ustawiania stanu wody (np. sterowanie zaworem) wymaga dodatkowej logiki
        // Przykładowo:
        // set_water_state(water_state);
    }
    else if (strcmp(topic, "hydrapet0001/update/get/water") == 0) {
        // Przykład: wysyłanie aktualnego stanu wody
        ESP_LOGI(TAG, "Wysyłanie aktualnego stanu wody na żądanie");
        // Pobierz aktualny stan wody i wyślij
        // Zakładam, że stan wody to waga, ale możesz to dostosować
        int water_state = get_water_weight(); // Dostosuj do rzeczywistej funkcji
        mqtt_publish_water_state(water_state);
    }
    else if (strcmp(topic, "hydrapet0001/update/get/status") == 0) {
        // Przykład: wysyłanie statusu urządzenia
        ESP_LOGI(TAG, "Wysyłanie statusu urządzenia na żądanie");
        // Zbierz wszystkie informacje o stanie urządzenia i wyślij
        int32_t weight = get_water_weight();
        time_t now;
        struct tm current_time;
        time(&now);
        localtime_r(&now, &current_time);
        bool button_state = pair_button_state();
        bool led_state = led_state; // Zakładam LED na GPIO 2
        bool pin15_state = led_state;

        mqtt_publish_all(weight, current_time, button_state, led_state, pin15_state);
    }
}


// Zadanie do publikowania danych co 10 sekund
static void publish_task(void *pvParameters)
{
    while (true)
    {
        // Sprawdź, czy jesteśmy połączeni do Wi-Fi
        if (!is_wifi_connected())
        {
            // Jeśli nie ma połączenia – nie rób nic, ewentualnie:
            ESP_LOGW(TAG, "Brak połączenia z Wi-Fi, czekam...");
            vTaskDelay(pdMS_TO_TICKS(2000)); // czekaj 2s i sprawdź znowu
            continue;
        }

        // Jesteśmy połączeni, odczytujemy dane
        int32_t weight = get_water_weight();  // z HX711
        time_t now = 0;
        time(&now);
        struct tm timeinfo = {0};
        localtime_r(&now, &timeinfo);

        // Stan przycisków
        bool mqtt_button_state = (gpio_get_level(BUTTON_MQTT_PIN) == 0); // załóżmy że 0 = wciśnięty
        bool pair_button_state = (gpio_get_level(BUTTON_PAIR_PIN) == 0);

        // Stan diody
        bool current_led_state = led_state;  // Jeśli przechowujesz w globalnej

        // Stan pinu 15 (motor)
        bool motor_state = (gpio_get_level(MOTOR_PIN) == 1);

        // Składamy payload JSON (lub dowolny format)
        char payload[200];
        snprintf(payload, sizeof(payload),
            "{"
            "\"weight\": %ld,"
            "\"time\":\"%04d-%02d-%02dT%02d:%02d:%02d\","
            "\"mqtt_button\": %d,"
            "\"pair_button\": %d,"
            "\"led_state\": %d,"
            "\"motor\": %d"
            "}",
            weight,
            timeinfo.tm_year + 1900, timeinfo.tm_mon + 1, timeinfo.tm_mday,
            timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec,
            mqtt_button_state ? 1 : 0,
            pair_button_state ? 1 : 0,
            current_led_state ? 1 : 0,
            motor_state ? 1 : 0
        );

        ESP_LOGI(TAG, "Publikowanie: %s", payload);

        // Wysyłamy na topic "hydrapet/get/all"
        mqtt_publish_all(weight, 
        				timeinfo, 
        				mqtt_button_state ? 1 : 0, 
        				current_led_state ? 1 : 0, 
        				motor_state ? 1 : 0);


        // Publikujemy stan wody na temat hydrapet0001/hydrapetinfo/water
        mqtt_publish_water_state(weight);

        // Publikujemy aktualny czas na temat hydrapet0001/hydrapetinfo/time
        mqtt_publish_current_time(timeinfo);

        // Po publikacji mignij diodą
        led_blink_once();

        // Czekaj 10 sekund
        vTaskDelay(pdMS_TO_TICKS(10000));
    }
}

// Obsługa przycisku pair – po wciśnięciu miga diodą co 500 ms i próbuje ponownie Wi-Fi
static void pair_button_task(void *pvParameters)
{
    bool prev_state = true; // Załóżmy pull-up = 1 (niewciśnięty)
    while (true)
    {
        bool current_state = (gpio_get_level(BUTTON_PAIR_PIN) == 0);
        if (current_state && !prev_state)
        {
            // Wciśnięto przycisk (zbocze opadające)
            ESP_LOGI(TAG, "Pair button pressed – miganie i ponowna próba Wi-Fi");
            // Miga diodą co 500 ms
            led_blink_pair();
            // Próba ponownego połączenia z Wi-Fi
            // np.:
            wifi_connected = wifi_init_sta(); // lub inna funkcja do ponownego łączenia
        }
        prev_state = current_state;

        vTaskDelay(pdMS_TO_TICKS(50)); // proste odpytywanie co 50ms
    }
}

void app_main(void)
{
    // Inicjalizacja NVS (potrzebne do Wi-Fi)
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES ||
        ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    // Inicjalizacja Wi-Fi
    // Załóżmy, że wifi_init() ustawia zmienną globalną wifi_connected = true, gdy się powiedzie
    wifi_connected = wifi_init_sta();

    // Sprawdź, czy udało się połączyć z Wi-Fi
    // Jeśli nie, pętla – nic nie rób
    if (!is_wifi_connected())
    {
        ESP_LOGW(TAG, "Nie udało się połączyć z Wi-Fi – nic nie robię");
        while (1)
        {
            vTaskDelay(pdMS_TO_TICKS(1000));
        }
    }

    // Inicjalizacja MQTT
    mqtt_init();

    // Inicjalizacja diody
    led_init();
    led_set_state(false);

    // Inicjalizacja przycisków
    buttons_init(); // w buttons.c np. skonfiguruj piny BUTTON_MQTT_PIN i BUTTON_PAIR_PIN

    // Inicjalizacja HX711
    hx711_init();
    tare(); 

    // Konfiguracja pinu MOTOR_PIN jako wyjście lub wejście (w zależności od użycia)
    gpio_config_t motor_conf = {
        .pin_bit_mask = (1ULL << MOTOR_PIN),
        .mode = GPIO_MODE_INPUT,  // lub OUTPUT jeśli sterujesz
        .pull_up_en = GPIO_PULLUP_DISABLE,
        .pull_down_en = GPIO_PULLDOWN_DISABLE,
        .intr_type = GPIO_INTR_DISABLE
    };
    gpio_config(&motor_conf);

    // Utworzenie zadań
    // 1) Zadanie publikujące co 10 sekund
    xTaskCreate(publish_task, "publish_task", 4096, NULL, 5, NULL);


    // Ustawiamy callback do obsługi odebranych wiadomości MQTT
    mqtt_set_message_callback(mqtt_message_handler);

    // 2) Zadanie obsługujące przycisk pair
    xTaskCreate(pair_button_task, "pair_button_task", 2048, NULL, 5, NULL);
    
    

    // Opcjonalnie: zadanie do obsługi przycisku MQTT, HX711, itp.
    // ...
    // hx711_task już w hx711.c => xTaskCreate(hx711_task, ...)

    // Główna pętla nie robi nic – wszystko jest w zadaniach
    while (1)
    {
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}
