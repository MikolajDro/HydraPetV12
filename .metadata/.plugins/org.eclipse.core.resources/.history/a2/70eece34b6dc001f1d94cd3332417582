#include <stdio.h>
#include <string.h>
#include <time.h>
#include <stdint.h>
#include <stdbool.h>

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/semphr.h"

#include "esp_log.h"
#include "esp_system.h"
#include "driver/gpio.h"
#include "nvs_flash.h"
#include "esp_event.h"
#include "esp_wifi.h"

#include "mqtt.h"         // Twój moduł MQTT
#include "hx711.h"        // Odczyt wagi
#include "led.h"          // Zarządzanie diodą (led_init, led_set_state itp.)
#include "buttons.h"      // Odczyt stanu przycisków
#include "driver/uart.h"  // Jeśli używasz UART
#include "wifi.h"
#include "motor.h"
#include "alarms.h"

static const char *TAG = "MAIN";

// Definicje pinów (jeśli nie masz w sdkconfig)
#define USER_BUTTON_PIN  GPIO_NUM_4  // User button
#define TANK_LEVEL_SENSOR_PIN  GPIO_NUM_10  // Przycisk pair (zamiast LED)
#define PUBLISH_ALL_DURATION_TIME	60 * 1000 // 1 minute between refresh


static void publish_task(void *pvParameters)
{
    while (true)
    {
        // Sprawdź, czy jesteśmy połączeni do Wi-Fi
        if (!is_wifi_connected())
        {
            // Jeśli nie ma połączenia – nie rób nic, ewentualnie:
            ESP_LOGW(TAG, "Brak połączenia z Wi-Fi, czekam...");
            vTaskDelay(pdMS_TO_TICKS(2000)); // czekaj 2s i sprawdź znowu
            continue;
        }

        // Jesteśmy połączeni, odczytujemy dane
        int32_t weight = get_water_weight();  // z HX711
        time_t now = 0;
        time(&now);
        struct tm timeinfo = {0};
        localtime_r(&now, &timeinfo);

        // Stan przycisków
        bool mqtt_button_state = (gpio_get_level(USER_BUTTON_PIN) == 0); // załóżmy że 0 = wciśnięty

        // Wysyłamy na topic "hydrapet/get/all"
        mqtt_publish_all(weight, 
        				timeinfo, 
        				mqtt_button_state ? 1 : 0, 
        				led_get_state(), 
        				get_motor_state());


        // Publikujemy stan wody na temat hydrapet0001/hydrapetinfo/water
        mqtt_publish_water_state(weight);

        // Publikujemy aktualny czas na temat hydrapet0001/hydrapetinfo/time
        mqtt_publish_current_time(timeinfo);

        // Po publikacji mignij diodą
        led_blink_once();

        // Czekaj 10 sekund
        vTaskDelay(pdMS_TO_TICKS(PUBLISH_ALL_DURATION_TIME));
    }
}

// Obsługa przycisku pair – po wciśnięciu miga diodą co 500 ms i próbuje ponownie Wi-Fi
static void pair_button_task(void *pvParameters)
{
    bool prev_state = true; // Załóżmy pull-up = 1 (niewciśnięty)
    while (true)
    {
        bool current_state = (gpio_get_level(TANK_LEVEL_SENSOR_PIN) == 0);
        if (current_state && !prev_state)
        {
            // Wciśnięto przycisk (zbocze opadające)
            ESP_LOGI(TAG, "Pair button pressed – miganie i ponowna próba Wi-Fi");
            // Miga diodą co 500 ms
            led_blink_pair();
            // Próba ponownego połączenia z Wi-Fi
            // np.:
            wifi_connected = wifi_init_sta(); // lub inna funkcja do ponownego łączenia
        }
        prev_state = current_state;

        vTaskDelay(pdMS_TO_TICKS(50)); // proste odpytywanie co 50ms
    }
}

void app_main(void)
{
    // Inicjalizacja NVS (potrzebne do Wi-Fi)
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES ||
        ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    // Inicjalizacja Wi-Fi
    set_is_wifi_connected(wifi_init_sta());

    // Sprawdź, czy udało się połączyć z Wi-Fi
    // Jeśli nie, pętla – nic nie rób
    while(!is_wifi_connected())
    {
        ESP_LOGW(TAG, "Connection not established");
        vTaskDelay(pdMS_TO_TICKS(200));
    }

    // Inicjalizacja MQTT
    mqtt_init();

    // Inicjalizacja diody
    led_init();
    led_set_state(false);
    
    motor_init();
    
    // Inicjalizacja alarmów
    alarms_init();

    // Inicjalizacja przycisków
    buttons_init(); // w buttons.c np. skonfiguruj piny USER_BUTTON_PIN i TANK_LEVEL_SENSOR_PIN

    // Inicjalizacja HX711
    hx711_init();
    tare(); 

    // Utworzenie zadań
    // 1) Zadanie publikujące co 10 sekund
    xTaskCreate(publish_task, "publish_task", 4096, NULL, 5, NULL);

    // Ustawiamy callback do obsługi odebranych wiadomości MQTT
    mqtt_set_message_callback(mqtt_message_handler);

    // 2) Zadanie obsługujące przycisk pair
    xTaskCreate(pair_button_task, "pair_button_task", 2048, NULL, 5, NULL);
    
    // Główna pętla nie robi nic – wszystko jest w zadaniach
    while (1)
    {
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}
